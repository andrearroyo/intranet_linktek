@page "/index"
@inject ISalaService salaService
@inject IPaqueteService paqueteService
@inject IPaqueteSistemaService paqueteSistemaService
@inject ILicenciaService licenciaService

@inject SweetAlertService Swal

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<div>
    @if (listaSala.Count() > 0)
    {
        <div class="mb-3">
            <select id="SelectedSala" class="form-control" @bind ="@idSala">
                @foreach (var item in listaSala)
                {
                    <option value="@item.idSala">@item.nombre</option>
                }
            </select>
        </div>
    }

    @if (listaPaquete.Count() > 0)
    {
        <div class="mb-3">
            <select id="SelectedPaquete" class="form-control" @onchange="seleccionPaquete">
                @foreach (var item in listaPaquete)
                {
                    <option value="@item.idPaquete">@item.nombre</option>
                }
            </select>
        </div>
    }

    @if (listaPaqueteSistema.Count() > 0)
    {
        <div class="mb-3">
            <select id="SelectedPaqueteSistema" class="form-control" @bind="@valorSistema"> 
                @foreach (var item in listaPaqueteSistema)
                {
                    <option value="@item.idSistema">@item.nombre_sistema</option>
                }
            </select>
        </div>
    }

    <button type="button" class="btn-primary" @onclick="GenerarLicencia">Generar Licencia</button>
    <button type="button" class="btn-primary" @onclick="ValidarLicencia">Validar Licencia</button>

</div>

@code{
    List<Sala> listaSala = new List<Sala>();
    List<Paquete> listaPaquete = new List<Paquete>();
    List<PaqueteSistema> listaPaqueteSistema = new List<PaqueteSistema>();
    Licencia itemLicencia = new Licencia();
    int idSala = 1;
    int paquete = 1;
    int valorSistema = 2;

    protected override async Task OnInitializedAsync()
    {
        listaSala = await salaService.GetAll();
        listaPaquete = await paqueteService.GetAll();
        listaPaqueteSistema = await paqueteSistemaService.GetAllPaqueteSistema();
        //return base.OnInitializedAsync();
    }

    async void seleccionPaquete(ChangeEventArgs e)
    {
        var id = Convert.ToInt32(e.Value.ToString());
        paquete = id;
        listaPaqueteSistema = await paqueteSistemaService.GetAllPaqueteSistema();
        listaPaqueteSistema = listaPaqueteSistema.Where(x => x.idPaquete == id).ToList();
        StateHasChanged();
    }

    async void GenerarLicencia()
    {
        try
        {
            itemLicencia= await licenciaService.GetByIDs(paquete, idSala);

            if (itemLicencia.nombrePaquete == "--")
            {
                Licencia item = new Licencia
                {
                    idPaquete = paquete,
                    idSala = idSala,
                    cantidad_dias = "30",
                    cantidad_free = "5",
                    estado = 1,
                    fecha_inic = DateTime.Now,
                    fecha_fin = DateTime.Now.AddDays(30),
                    tipo = 1
                };

                var rpta = licenciaService.Insert(item);

                if (rpta)
                { 
                    await Swal.FireAsync("Alerta", "Se registró la licencia correctamente", SweetAlertIcon.Success); 
                }
                else
                { 
                    await Swal.FireAsync("Alerta", "Error al asignar licencia", SweetAlertIcon.Error); 
                }
            }
            else
            {
                await Swal.FireAsync("Alerta", "Ya existe un regsitro de licencia activa", SweetAlertIcon.Error); 
            }
        }   
        catch(Exception ex)
        {
        }
    }

    async void ValidarLicencia()
    {
        try
        {
            itemLicencia= await licenciaService.GetLicenciaRemota(valorSistema, idSala, DateTime.Now);
            if(itemLicencia.mensaje != "--")
            {
                if(itemLicencia.mensaje.Contains("Activa"))
                    await Swal.FireAsync("Alerta", itemLicencia.mensaje, SweetAlertIcon.Success); 
                else
                    await Swal.FireAsync("Alerta", itemLicencia.mensaje, SweetAlertIcon.Warning); 
            }
        }
        catch(Exception ex)
        {
        }
    }

}